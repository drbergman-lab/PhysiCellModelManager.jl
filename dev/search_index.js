var documenterSearchIndex = {"docs":
[{"location":"man/guide/#Setting-up-your-project-repository","page":"Guide","title":"Setting up your project repository","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To set up your pcvct-enabled repository within project-dir (the name of your project directory), create the following directory structure:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"project-dir/\n├── data/\n│   └── inputs/\n│       ├── configs/\n│       ├── custom_codes/\n│       ├── ics/\n│       │   ├── cells/\n│       │   ├── ecms/\n│       │   └── substrates/\n│       ├── rulesets_collections/\n└── VCT/","category":"page"},{"location":"man/guide/#Setting-up-the-data/inputs/-directory","page":"Guide","title":"Setting up the data/inputs/ directory","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Within each of the terminal subdirectories above within data/inputs/, add a subdirectory with a user-defined name with content described below. We will use the name \"default\" for all as an example.","category":"page"},{"location":"man/guide/#Configs","page":"Guide","title":"Configs","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Add a single file within data/inputs/configs/default/ called PhysiCell_settings.xml with the base configuration file for your PhysiCell project.","category":"page"},{"location":"man/guide/#Custom-codes","page":"Guide","title":"Custom codes","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Add within data/inputs/custom_codes/default/ the following, each exactly as is used in a PhysiCell project:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"main.cpp\nMakefile\ncustom_modules/","category":"page"},{"location":"man/guide/#ICs","page":"Guide","title":"ICs","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"These folders are optional as not every model includes initial conditions as separate files. If your model does, for each initial condition add a subfolder. For example, if you have two initial cell position conditions, random_cells.csv and structured_cells.csv, the data/inputs/ics/cells/ directory would look like this:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"cells/\n├── random_cells/\n│   └── cells.csv\n└── structured_cells/\n    └── cells.csv","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Note: Place the files in their corresponding folders and rename to cells.csv.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Proceed similarly for ecms/ and substrates/, renaming those files to ecm.csv and substrates.csv respectively.","category":"page"},{"location":"man/guide/#Rulesets-collections","page":"Guide","title":"Rulesets collections","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Add a single file within data/inputs/rulesets_collections/default/ called base_rulesets.csv with the base ruleset collection for your PhysiCell project. If your project does not use rules, you can skip this step.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = pcvct","category":"page"},{"location":"#pcvct","page":"Home","title":"pcvct","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for pcvct.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [pcvct]","category":"page"},{"location":"#pcvct.constituentsType-Tuple{Trial}","page":"Home","title":"pcvct.constituentsType","text":"constituentsType(T::AbstractTrial) -> Type\n\nReturns the type of constituents for a given AbstractTrial.\n\nArguments\n\nT::AbstractTrial: An AbstractTrial object.\n\nReturns\n\nType: The type of constituents.\n\n\n\n\n\n","category":"method"},{"location":"#pcvct.initializeVCT-Tuple{String, String}","page":"Home","title":"pcvct.initializeVCT","text":"initializeVCT(path_to_physicell::String, path_to_data::String)\n\nInitializes the VCT environment by setting the paths to PhysiCell and data directories, and initializing the database.\n\nArguments\n\npath_to_physicell::String: Path to the PhysiCell directory.\npath_to_data::String: Path to the data directory.\n\n\n\n\n\n","category":"method"},{"location":"#pcvct.pcvctLogo-Tuple{}","page":"Home","title":"pcvct.pcvctLogo","text":"pcvctLogo() -> String\n\nReturns a string representation of the PCVCT logo.\n\n\n\n\n\n","category":"method"},{"location":"#pcvct.readConstituentIDs-Tuple{String}","page":"Home","title":"pcvct.readConstituentIDs","text":"readConstituentIDs(path_to_csv::String) -> Vector{Int}\n\nReads constituent IDs from a CSV file.\n\nArguments\n\npath_to_csv::String: Path to the CSV file.\n\nReturns\n\nVector{Int}: A vector of constituent IDs.\n\n\n\n\n\n","category":"method"},{"location":"#pcvct.readConstituentIDs-Tuple{pcvct.AbstractTrial}","page":"Home","title":"pcvct.readConstituentIDs","text":"readConstituentIDs(T::AbstractTrial)\n\nReads the constituent IDs for a given trial type T.\n\nArguments\n\nT::AbstractTrial: An instance of a trial type.\n\nReturns\n\nA list of constituent IDs read from a CSV file.\n\nDetails\n\nThe function constructs a file path based on the type and ID of the trial T.  It then reads the constituent IDs from a CSV file located at the constructed path.\n\n\n\n\n\n","category":"method"}]
}
